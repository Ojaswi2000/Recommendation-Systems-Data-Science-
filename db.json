{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "column_names=['user_id','item_id','rating','timestamp']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('u.data',sep='\\t',names=column_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>rating</th>\n",
       "      <th>timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>5</td>\n",
       "      <td>881250949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>5</td>\n",
       "      <td>881250949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>133</td>\n",
       "      <td>1</td>\n",
       "      <td>881250949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>196</td>\n",
       "      <td>242</td>\n",
       "      <td>3</td>\n",
       "      <td>881250949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>186</td>\n",
       "      <td>302</td>\n",
       "      <td>3</td>\n",
       "      <td>891717742</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  item_id  rating  timestamp\n",
       "0        0       50       5  881250949\n",
       "1        0      172       5  881250949\n",
       "2        0      133       1  881250949\n",
       "3      196      242       3  881250949\n",
       "4      186      302       3  891717742"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "movie_titles=pd.read_csv('Movie_Id_Titles')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>GoldenEye (1995)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Four Rooms (1995)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Get Shorty (1995)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Copycat (1995)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item_id              title\n",
       "0        1   Toy Story (1995)\n",
       "1        2   GoldenEye (1995)\n",
       "2        3  Four Rooms (1995)\n",
       "3        4  Get Shorty (1995)\n",
       "4        5     Copycat (1995)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movie_titles.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.merge(df,movie_titles,on='item_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>rating</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>5</td>\n",
       "      <td>881250949</td>\n",
       "      <td>Star Wars (1977)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>290</td>\n",
       "      <td>50</td>\n",
       "      <td>5</td>\n",
       "      <td>880473582</td>\n",
       "      <td>Star Wars (1977)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>79</td>\n",
       "      <td>50</td>\n",
       "      <td>4</td>\n",
       "      <td>891271545</td>\n",
       "      <td>Star Wars (1977)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "      <td>5</td>\n",
       "      <td>888552084</td>\n",
       "      <td>Star Wars (1977)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>50</td>\n",
       "      <td>5</td>\n",
       "      <td>879362124</td>\n",
       "      <td>Star Wars (1977)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  item_id  rating  timestamp             title\n",
       "0        0       50       5  881250949  Star Wars (1977)\n",
       "1      290       50       5  880473582  Star Wars (1977)\n",
       "2       79       50       4  891271545  Star Wars (1977)\n",
       "3        2       50       5  888552084  Star Wars (1977)\n",
       "4        8       50       5  879362124  Star Wars (1977)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set_style('white')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "title\n",
       "Marlene Dietrich: Shadow and Light (1996)     5.0\n",
       "Prefontaine (1997)                            5.0\n",
       "Santa with Muscles (1996)                     5.0\n",
       "Star Kid (1997)                               5.0\n",
       "Someone Else's America (1995)                 5.0\n",
       "Name: rating, dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('title')['rating'].mean().sort_values(ascending=False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "title\n",
       "Star Wars (1977)             584\n",
       "Contact (1997)               509\n",
       "Fargo (1996)                 508\n",
       "Return of the Jedi (1983)    507\n",
       "Liar Liar (1997)             485\n",
       "Name: rating, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('title')['rating'].count().sort_values(ascending=False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings=pd.DataFrame(df.groupby('title')['rating'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>'Til There Was You (1997)</th>\n",
       "      <td>2.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1-900 (1994)</th>\n",
       "      <td>2.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101 Dalmatians (1996)</th>\n",
       "      <td>2.908257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12 Angry Men (1957)</th>\n",
       "      <td>4.344000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187 (1997)</th>\n",
       "      <td>3.024390</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             rating\n",
       "title                              \n",
       "'Til There Was You (1997)  2.333333\n",
       "1-900 (1994)               2.600000\n",
       "101 Dalmatians (1996)      2.908257\n",
       "12 Angry Men (1957)        4.344000\n",
       "187 (1997)                 3.024390"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings['number of ratings']=pd.DataFrame(df.groupby('title')['rating'].count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating</th>\n",
       "      <th>number of ratings</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>'Til There Was You (1997)</th>\n",
       "      <td>2.333333</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1-900 (1994)</th>\n",
       "      <td>2.600000</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101 Dalmatians (1996)</th>\n",
       "      <td>2.908257</td>\n",
       "      <td>109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12 Angry Men (1957)</th>\n",
       "      <td>4.344000</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187 (1997)</th>\n",
       "      <td>3.024390</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             rating  number of ratings\n",
       "title                                                 \n",
       "'Til There Was You (1997)  2.333333                  9\n",
       "1-900 (1994)               2.600000                  5\n",
       "101 Dalmatians (1996)      2.908257                109\n",
       "12 Angry Men (1957)        4.344000                125\n",
       "187 (1997)                 3.024390                 41"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21c6a4bf308>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXYAAAD3CAYAAAAJxX+sAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAQFElEQVR4nO3db4xddZ3H8fcM7VAwhWgWzEqsDbp+M48wYFJcwTYRtmLXrev+CTH+g5iNSR/YxETBFKlZH+gGSXTFSECs7uoTC5qsptJk/2BFFDWYiN79ElmQByamNEHqn3FoO/vgntHhMnPv7Z07nXu+fb+SSc753XvPfL+9zeee+Z0/d2phYQFJUh3T612AJGm8DHZJKsZgl6RiDHZJKsZgl6RiNqznL9+2bdvCJZdcMtJr5+fnmZmZGXNF68d+Jpv9TL5qPfXr56c//enTmXnRSq9d12C/5JJLuO+++0Z6bafTYXZ2dswVrR/7mWz2M/mq9dSvn4j4Rb/XOhUjScUY7JJUjMEuScUY7JJUjMEuScUY7JJUjMEuScUY7JJUjMEuScW0Nti3bL30eetzz51cp0okabKs6y0FVuNF553L1pu++cf1Jz++ax2rkaTJ0do9dknS8gx2SSrGYJekYoaaY4+IR4BfN6tPAHcCnwJOAIcz86MRMQ18FrgM+APw3sz8+fhLliT1MzDYI2ITQGbuWDL2Y+DvgP8DvhkRlwNbgU2Z+bqIuBL4JLB7DWqWJPUxzB77ZcD5EXG4ef5+4NzMfBwgIu4H3gj8OfAtgMz8XkS8dk0qliT1NUyw/w64Dbgb+AvgEPDMksePA5cCF/Cn6RqAkxGxITNPrLTh+fl5Op3OaRcNLPvNIqNuaxLMzc21uv5e9jPZqvUD9XpaTT/DBPtjwM8zcwF4LCJ+DbxkyeOb6Qb9+c3youl+oQ4wMzMz1q+yavPXYp1NX+vVRvYz+ar1tJp+hjkr5ka68+VExMvoBvhvI+KVETEF7ASOAA8Cb26edyXwk5EqkiStyjB77J8HDkTEd4AFukF/CvgycA7ds2K+HxE/AK6NiO8CU8ANa1SzJKmPgcGemfPA25d56Mqe550C3jemuiRJI/ICJUkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGI2DPOkiLgY+BFwLXACOAAsAI8CezLzVETcCuxqHt+bmQ+vScWSpL4G7rFHxEbgTuD3zdDtwL7MvBqYAnZHxOXAdmAbcD1wx9qUK0kaZJipmNuAzwG/bNavAB5olg8B1wBXAYczcyEznwI2RMRF4y5WkjRY36mYiHgPcDQz74+Im5vhqcxcaJaPAxcCFwDHlrx0cfxov+3Pz8/T6XRGqZvZ2dkXjI26rUkwNzfX6vp72c9kq9YP1OtpNf0MmmO/EViIiGuA1wBfAi5e8vhm4Bng2Wa5d7yvmZmZZQN6VOPc1pnW6XRaXX8v+5ls1fqBej2tpp++UzGZ+YbM3J6ZO4AfA+8CDkXEjuYp1wFHgAeBnRExHRFbgOnMfHqkiiRJqzLUWTE9PgDcFREzQAc4mJknI+II8BDdD4s9Y6xRknQahg72Zq990fZlHt8P7F91RZKkVfECJUkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGIMdkkqxmCXpGI2DHpCRJwD3AUEcBK4AZgCDgALwKPAnsw8FRG3AruAE8DezHx4jeqWJK1gmD32twBk5uuBjwC3Nz/7MvNquiG/OyIuB7YD24DrgTvWpGJJUl8D99gz8+sR8Y1m9RXAr+julT/QjB0C/gpI4HBmLgBPRcSGiLgoM4+utO35+Xk6nc5Ihc/Ozr5gbNRtTYK5ublW19/LfiZbtX6gXk+r6WdgsANk5omI+CLwt8DfA3/dBDjAceBC4ALg2JKXLY6vGOwzMzPLBvSoxrmtM63T6bS6/l72M9mq9QP1elpNP0MfPM3MdwOvpjvfft6ShzYDzwDPNsu945KkM2hgsEfEOyPi5mb1d8Ap4IcRsaMZuw44AjwI7IyI6YjYAkxn5tNrULMkqY9hpmLuA74QEd8GNgJ7gQ5wV0TMNMsHM/NkRBwBHqL7gbFnjWqWJPUxzMHT3wL/uMxD25d57n5g/6qrkiSNzAuUJKkYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJakYg12SijHYJamYDf0ejIiNwD3AVuBc4GPAz4ADwALwKLAnM09FxK3ALuAEsDczH167siVJKxm0x/4O4FhmXg1cB3wGuB3Y14xNAbsj4nJgO7ANuB64Y+1KliT1MyjYvwrcsmT9BHAF8ECzfgi4BrgKOJyZC5n5FLAhIi4ad7GSpMH6TsVk5m8AImIzcBDYB9yWmQvNU44DFwIXAMeWvHRx/Gi/7c/Pz9PpdEYqfHZ29gVjo25rEszNzbW6/l72M9mq9QP1elpNP32DHSAiXg58DfhsZn4lIv5lycObgWeAZ5vl3vG+ZmZmlg3oUY1zW2dap9Npdf297GeyVesH6vW0mn76TsVExEuBw8CHMvOeZviRiNjRLF8HHAEeBHZGxHREbAGmM/PpkSqSJK3KoD32DwMvBm6JiMW59vcDn46IGaADHMzMkxFxBHiI7ofFnrUqWJLU36A59vfTDfJe25d57n5g/1iqkiSNzAuUJKkYg12SijHYJakYg12SijHYJakYg12SijHYJamYMsE+99zJocYkqbqB94ppi00bz2HrTd983tiTH9+1TtVI0vops8cuSeoy2CWpGINdkoox2CWpGINdkoox2CWpGINdkoox2CWpGINdkoox2CWpGINdkoox2CWpGINdkoox2CWpGINdkoox2CWpGINdkoopHey9X43nV+VJOhuU+Wq85fR+XZ5flSfpbFB6j12SzkYGuyQVY7BLUjEGuyQVM9TB04jYBnwiM3dExKuAA8AC8CiwJzNPRcStwC7gBLA3Mx9eo5olSX0M3GOPiA8CdwObmqHbgX2ZeTUwBeyOiMuB7cA24HrgjrUpV5I0yDBTMY8Db1uyfgXwQLN8CLgGuAo4nJkLmfkUsCEiLhprpWPgee2SzgYDp2Iy896I2LpkaCozF5rl48CFwAXAsSXPWRw/2m/b8/PzdDqd0yp40ezs7Gm/Zrnz2kf9/eM2Nzc3MbWMg/1Mtmr9QL2eVtPP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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ratings['number of ratings'].hist(bins=70)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21c6a5cea48>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ratings['rating'].hist(bins=70)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.JointGrid at 0x21c6a6f6848>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.jointplot(x='rating',y='number of ratings',data=ratings,alpha=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "moviemat=df.pivot_table(index='user_id',columns='title',values='rating')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>title</th>\n",
       "      <th>'Til There Was You (1997)</th>\n",
       "      <th>1-900 (1994)</th>\n",
       "      <th>101 Dalmatians (1996)</th>\n",
       "      <th>12 Angry Men (1957)</th>\n",
       "      <th>187 (1997)</th>\n",
       "      <th>2 Days in the Valley (1996)</th>\n",
       "      <th>20,000 Leagues Under the Sea (1954)</th>\n",
       "      <th>2001: A Space Odyssey (1968)</th>\n",
       "      <th>3 Ninjas: High Noon At Mega Mountain (1998)</th>\n",
       "      <th>39 Steps, The (1935)</th>\n",
       "      <th>...</th>\n",
       "      <th>Yankee Zulu (1994)</th>\n",
       "      <th>Year of the Horse (1997)</th>\n",
       "      <th>You So Crazy (1994)</th>\n",
       "      <th>Young Frankenstein (1974)</th>\n",
       "      <th>Young Guns (1988)</th>\n",
       "      <th>Young Guns II (1990)</th>\n",
       "      <th>Young Poisoner's Handbook, The (1995)</th>\n",
       "      <th>Zeus and Roxanne (1997)</th>\n",
       "      <th>unknown</th>\n",
       "      <th>Á köldum klaka (Cold Fever) (1994)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 1664 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "title    'Til There Was You (1997)  1-900 (1994)  101 Dalmatians (1996)  \\\n",
       "user_id                                                                   \n",
       "0                              NaN           NaN                    NaN   \n",
       "1                              NaN           NaN                    2.0   \n",
       "2                              NaN           NaN                    NaN   \n",
       "3                              NaN           NaN                    NaN   \n",
       "4                              NaN           NaN                    NaN   \n",
       "\n",
       "title    12 Angry Men (1957)  187 (1997)  2 Days in the Valley (1996)  \\\n",
       "user_id                                                                 \n",
       "0                        NaN         NaN                          NaN   \n",
       "1                        5.0         NaN                          NaN   \n",
       "2                        NaN         NaN                          NaN   \n",
       "3                        NaN         2.0                          NaN   \n",
       "4                        NaN         NaN                          NaN   \n",
       "\n",
       "title    20,000 Leagues Under the Sea (1954)  2001: A Space Odyssey (1968)  \\\n",
       "user_id                                                                      \n",
       "0                                        NaN                           NaN   \n",
       "1                                        3.0                           4.0   \n",
       "2                                        NaN                           NaN   \n",
       "3                                        NaN                           NaN   \n",
       "4                                        NaN                           NaN   \n",
       "\n",
       "title    3 Ninjas: High Noon At Mega Mountain (1998)  39 Steps, The (1935)  \\\n",
       "user_id                                                                      \n",
       "0                                                NaN                   NaN   \n",
       "1                                                NaN                   NaN   \n",
       "2                                                1.0                   NaN   \n",
       "3                                                NaN                   NaN   \n",
       "4                                                NaN                   NaN   \n",
       "\n",
       "title    ...  Yankee Zulu (1994)  Year of the Horse (1997)  \\\n",
       "user_id  ...                                                 \n",
       "0        ...                 NaN                       NaN   \n",
       "1        ...                 NaN                       NaN   \n",
       "2        ...                 NaN                       NaN   \n",
       "3        ...                 NaN                       NaN   \n",
       "4        ...                 NaN                       NaN   \n",
       "\n",
       "title    You So Crazy (1994)  Young Frankenstein (1974)  Young Guns (1988)  \\\n",
       "user_id                                                                      \n",
       "0                        NaN                        NaN                NaN   \n",
       "1                        NaN                        5.0                3.0   \n",
       "2                        NaN                        NaN                NaN   \n",
       "3                        NaN                        NaN                NaN   \n",
       "4                        NaN                        NaN                NaN   \n",
       "\n",
       "title    Young Guns II (1990)  Young Poisoner's Handbook, The (1995)  \\\n",
       "user_id                                                                \n",
       "0                         NaN                                    NaN   \n",
       "1                         NaN                                    NaN   \n",
       "2                         NaN                                    NaN   \n",
       "3                         NaN                                    NaN   \n",
       "4                         NaN                                    NaN   \n",
       "\n",
       "title    Zeus and Roxanne (1997)  unknown  Á köldum klaka (Cold Fever) (1994)  \n",
       "user_id                                                                        \n",
       "0                            NaN      NaN                                 NaN  \n",
       "1                            NaN      4.0                                 NaN  \n",
       "2                            NaN      NaN                                 NaN  \n",
       "3                            NaN      NaN                                 NaN  \n",
       "4                            NaN      NaN                                 NaN  \n",
       "\n",
       "[5 rows x 1664 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "moviemat.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating</th>\n",
       "      <th>number of ratings</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Star Wars (1977)</th>\n",
       "      <td>4.359589</td>\n",
       "      <td>584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Contact (1997)</th>\n",
       "      <td>3.803536</td>\n",
       "      <td>509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fargo (1996)</th>\n",
       "      <td>4.155512</td>\n",
       "      <td>508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Return of the Jedi (1983)</th>\n",
       "      <td>4.007890</td>\n",
       "      <td>507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Liar Liar (1997)</th>\n",
       "      <td>3.156701</td>\n",
       "      <td>485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>English Patient, The (1996)</th>\n",
       "      <td>3.656965</td>\n",
       "      <td>481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Scream (1996)</th>\n",
       "      <td>3.441423</td>\n",
       "      <td>478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Toy Story (1995)</th>\n",
       "      <td>3.878319</td>\n",
       "      <td>452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Air Force One (1997)</th>\n",
       "      <td>3.631090</td>\n",
       "      <td>431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Independence Day (ID4) (1996)</th>\n",
       "      <td>3.438228</td>\n",
       "      <td>429</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 rating  number of ratings\n",
       "title                                                     \n",
       "Star Wars (1977)               4.359589                584\n",
       "Contact (1997)                 3.803536                509\n",
       "Fargo (1996)                   4.155512                508\n",
       "Return of the Jedi (1983)      4.007890                507\n",
       "Liar Liar (1997)               3.156701                485\n",
       "English Patient, The (1996)    3.656965                481\n",
       "Scream (1996)                  3.441423                478\n",
       "Toy Story (1995)               3.878319                452\n",
       "Air Force One (1997)           3.631090                431\n",
       "Independence Day (ID4) (1996)  3.438228                429"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings.sort_values('number of ratings',ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "starwars_user_ratings=moviemat['Star Wars (1977)']\n",
    "liarliar_user_ratings=moviemat['Liar Liar (1997)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id\n",
       "0    5.0\n",
       "1    5.0\n",
       "2    5.0\n",
       "3    NaN\n",
       "4    5.0\n",
       "5    4.0\n",
       "6    4.0\n",
       "7    5.0\n",
       "8    5.0\n",
       "9    5.0\n",
       "Name: Star Wars (1977), dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "starwars_user_ratings.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "similar_to_starwars=moviemat.corrwith(starwars_user_ratings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\hp\\anaconda3\\lib\\site-packages\\numpy\\lib\\function_base.py:2526: RuntimeWarning: Degrees of freedom <= 0 for slice\n",
      "  c = cov(x, y, rowvar)\n",
      "C:\\Users\\hp\\anaconda3\\lib\\site-packages\\numpy\\lib\\function_base.py:2455: RuntimeWarning: divide by zero encountered in true_divide\n",
      "  c *= np.true_divide(1, fact)\n"
     ]
    }
   ],
   "source": [
    "similar_to_liarliar=moviemat.corrwith(liarliar_user_ratings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "corr_starwars=pd.DataFrame(similar_to_starwars,columns=['Correlation'])\n",
    "corr_starwars.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Correlation</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>'Til There Was You (1997)</th>\n",
       "      <td>0.872872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1-900 (1994)</th>\n",
       "      <td>-0.645497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101 Dalmatians (1996)</th>\n",
       "      <td>0.211132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12 Angry Men (1957)</th>\n",
       "      <td>0.184289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187 (1997)</th>\n",
       "      <td>0.027398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Correlation\n",
       "title                                 \n",
       "'Til There Was You (1997)     0.872872\n",
       "1-900 (1994)                 -0.645497\n",
       "101 Dalmatians (1996)         0.211132\n",
       "12 Angry Men (1957)           0.184289\n",
       "187 (1997)                    0.027398"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_starwars.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Correlation</th>\n",
       "      <th>number of ratings</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Commandments (1997)</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cosi (1996)</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>No Escape (1994)</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stripes (1981)</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Man of the Year (1995)</th>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hollow Reed (1996)</th>\n",
       "      <td>1.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Beans of Egypt, Maine, The (1994)</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Good Man in Africa, A (1994)</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Old Lady Who Walked in the Sea, The (Vieille qui marchait dans la mer, La) (1991)</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Outlaw, The (1943)</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    Correlation  \\\n",
       "title                                                             \n",
       "Commandments (1997)                                         1.0   \n",
       "Cosi (1996)                                                 1.0   \n",
       "No Escape (1994)                                            1.0   \n",
       "Stripes (1981)                                              1.0   \n",
       "Man of the Year (1995)                                      1.0   \n",
       "Hollow Reed (1996)                                          1.0   \n",
       "Beans of Egypt, Maine, The (1994)                           1.0   \n",
       "Good Man in Africa, A (1994)                                1.0   \n",
       "Old Lady Who Walked in the Sea, The (Vieille qu...          1.0   \n",
       "Outlaw, The (1943)                                          1.0   \n",
       "\n",
       "                                                    number of ratings  \n",
       "title                                                                  \n",
       "Commandments (1997)                                                 3  \n",
       "Cosi (1996)                                                         4  \n",
       "No Escape (1994)                                                    5  \n",
       "Stripes (1981)                                                      5  \n",
       "Man of the Year (1995)                                              9  \n",
       "Hollow Reed (1996)                                                  6  \n",
       "Beans of Egypt, Maine, The (1994)                                   2  \n",
       "Good Man in Africa, A (1994)                                        2  \n",
       "Old Lady Who Walked in the Sea, The (Vieille qu...                  5  \n",
       "Outlaw, The (1943)                                                  2  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_starwars.sort_values('Correlation',ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Correlation</th>\n",
       "      <th>number of ratings</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Star Wars (1977)</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Empire Strikes Back, The (1980)</th>\n",
       "      <td>0.748353</td>\n",
       "      <td>368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Return of the Jedi (1983)</th>\n",
       "      <td>0.672556</td>\n",
       "      <td>507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Raiders of the Lost Ark (1981)</th>\n",
       "      <td>0.536117</td>\n",
       "      <td>420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Austin Powers: International Man of Mystery (1997)</th>\n",
       "      <td>0.377433</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sting, The (1973)</th>\n",
       "      <td>0.367538</td>\n",
       "      <td>241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Indiana Jones and the Last Crusade (1989)</th>\n",
       "      <td>0.350107</td>\n",
       "      <td>331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pinocchio (1940)</th>\n",
       "      <td>0.347868</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Frighteners, The (1996)</th>\n",
       "      <td>0.332729</td>\n",
       "      <td>115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>L.A. Confidential (1997)</th>\n",
       "      <td>0.319065</td>\n",
       "      <td>297</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    Correlation  \\\n",
       "title                                                             \n",
       "Star Wars (1977)                                       1.000000   \n",
       "Empire Strikes Back, The (1980)                        0.748353   \n",
       "Return of the Jedi (1983)                              0.672556   \n",
       "Raiders of the Lost Ark (1981)                         0.536117   \n",
       "Austin Powers: International Man of Mystery (1997)     0.377433   \n",
       "Sting, The (1973)                                      0.367538   \n",
       "Indiana Jones and the Last Crusade (1989)              0.350107   \n",
       "Pinocchio (1940)                                       0.347868   \n",
       "Frighteners, The (1996)                                0.332729   \n",
       "L.A. Confidential (1997)                               0.319065   \n",
       "\n",
       "                                                    number of ratings  \n",
       "title                                                                  \n",
       "Star Wars (1977)                                                  584  \n",
       "Empire Strikes Back, The (1980)                                   368  \n",
       "Return of the Jedi (1983)                                         507  \n",
       "Raiders of the Lost Ark (1981)                                    420  \n",
       "Austin Powers: International Man of Mystery (1997)                130  \n",
       "Sting, The (1973)                                                 241  \n",
       "Indiana Jones and the Last Crusade (1989)                         331  \n",
       "Pinocchio (1940)                                                  101  \n",
       "Frighteners, The (1996)                                           115  \n",
       "L.A. Confidential (1997)                                          297  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_starwars[corr_starwars['number of ratings']>100].sort_values('Correlation',ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "corr_liarliar=pd.DataFrame(similar_to_liarliar,columns=['Correlation'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "corr_liarliar.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Correlation</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>'Til There Was You (1997)</th>\n",
       "      <td>0.118913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101 Dalmatians (1996)</th>\n",
       "      <td>0.469765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12 Angry Men (1957)</th>\n",
       "      <td>0.066272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187 (1997)</th>\n",
       "      <td>0.175145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2 Days in the Valley (1996)</th>\n",
       "      <td>0.040739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20,000 Leagues Under the Sea (1954)</th>\n",
       "      <td>-0.027932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001: A Space Odyssey (1968)</th>\n",
       "      <td>-0.057864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39 Steps, The (1935)</th>\n",
       "      <td>0.400918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8 1/2 (1963)</th>\n",
       "      <td>0.178064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A Chef in Love (1996)</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     Correlation\n",
       "title                                           \n",
       "'Til There Was You (1997)               0.118913\n",
       "101 Dalmatians (1996)                   0.469765\n",
       "12 Angry Men (1957)                     0.066272\n",
       "187 (1997)                              0.175145\n",
       "2 Days in the Valley (1996)             0.040739\n",
       "20,000 Leagues Under the Sea (1954)    -0.027932\n",
       "2001: A Space Odyssey (1968)           -0.057864\n",
       "39 Steps, The (1935)                    0.400918\n",
       "8 1/2 (1963)                            0.178064\n",
       "A Chef in Love (1996)                   0.000000"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_liarliar.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "corr_liarliar =corr_liarliar.join(ratings['number of ratings'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Correlation</th>\n",
       "      <th>number of ratings</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>'Til There Was You (1997)</th>\n",
       "      <td>0.118913</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101 Dalmatians (1996)</th>\n",
       "      <td>0.469765</td>\n",
       "      <td>109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12 Angry Men (1957)</th>\n",
       "      <td>0.066272</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187 (1997)</th>\n",
       "      <td>0.175145</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2 Days in the Valley (1996)</th>\n",
       "      <td>0.040739</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Correlation  number of ratings\n",
       "title                                                      \n",
       "'Til There Was You (1997)       0.118913                  9\n",
       "101 Dalmatians (1996)           0.469765                109\n",
       "12 Angry Men (1957)             0.066272                125\n",
       "187 (1997)                      0.175145                 41\n",
       "2 Days in the Valley (1996)     0.040739                 93"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_liarliar.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Correlation</th>\n",
       "      <th>number of ratings</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Liar Liar (1997)</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Batman Forever (1995)</th>\n",
       "      <td>0.516968</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mask, The (1994)</th>\n",
       "      <td>0.484650</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Down Periscope (1996)</th>\n",
       "      <td>0.472681</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Con Air (1997)</th>\n",
       "      <td>0.469828</td>\n",
       "      <td>137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pretty Woman (1990)</th>\n",
       "      <td>0.469790</td>\n",
       "      <td>164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101 Dalmatians (1996)</th>\n",
       "      <td>0.469765</td>\n",
       "      <td>109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Michael (1996)</th>\n",
       "      <td>0.442022</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waterworld (1995)</th>\n",
       "      <td>0.438405</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Indiana Jones and the Last Crusade (1989)</th>\n",
       "      <td>0.414427</td>\n",
       "      <td>331</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           Correlation  number of ratings\n",
       "title                                                                    \n",
       "Liar Liar (1997)                              1.000000                485\n",
       "Batman Forever (1995)                         0.516968                114\n",
       "Mask, The (1994)                              0.484650                129\n",
       "Down Periscope (1996)                         0.472681                101\n",
       "Con Air (1997)                                0.469828                137\n",
       "Pretty Woman (1990)                           0.469790                164\n",
       "101 Dalmatians (1996)                         0.469765                109\n",
       "Michael (1996)                                0.442022                119\n",
       "Waterworld (1995)                             0.438405                102\n",
       "Indiana Jones and the Last Crusade (1989)     0.414427                331"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_liarliar[corr_liarliar['number of ratings']>100].sort_values('Correlation',ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
